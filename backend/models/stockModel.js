const mongoose = require("mongoose");

const stockpileSchema = new mongoose.Schema({
  _id: {
    type: String,
    required: true,
  },
  defaultKeyStatistics: {
    maxAge: Number,
    priceHint: Number,
    enterpriseValue: Number,
    forwardPE: Number,
    profitMargins: Number,
    floatShares: Number,
    sharesOutstanding: Number,
    sharesShort: Number,
    sharesShortPriorMonth: Number,
    sharesShortPreviousMonthDate: Date,
    dateShortInterest: Date,
    sharesPercentSharesOut: Number,
    heldPercentInsiders: Number,
    heldPercentInstitutions: Number,
    shortRatio: Number,
    shortPercentOfFloat: Number,
    beta: Number,
    impliedSharesOutstanding: Number,
    category: String,
    bookValue: Number,
    priceToBook: Number,
    fundFamily: String,
    legalType: String,
    lastFiscalYearEnd: Date,
    nextFiscalYearEnd: Date,
    mostRecentQuarter: Date,
    netIncomeToCommon: Number,
    trailingEps: Number,
    forwardEps: Number,
    pegRatio: Number,
    lastSplitFactor: String,
    enterpriseToRevenue: Number,
    enterpriseToEbitda: Number,
    "52WeekChange": Number,
    SandP52WeekChange: Number,
  },
  summaryProfile: {
    address1: String,
    city: String,
    state: String,
    zip: String,
    country: String,
    phone: String,
    website: String,
    industry: String,
    industryKey: String,
    industryDisp: String,
    sector: String,
    sectorKey: String,
    sectorDisp: String,
    longBusinessSummary: String,
    fullTimeEmployees: Number,
    companyOfficers: [String],
    maxAge: Number,
  },
  price: {
    maxAge: Number,
    preMarketChangePercent: Number,
    preMarketChange: Number,
    preMarketTime: Date,
    preMarketPrice: Number,
    preMarketSource: String,
    postMarketChangePercent: Number,
    postMarketChange: Number,
    postMarketTime: Date,
    postMarketPrice: Number,
    postMarketSource: String,
    regularMarketChangePercent: Number,
    regularMarketChange: Number,
    regularMarketTime: Date,
    priceHint: Number,
    regularMarketPrice: Number,
    regularMarketDayHigh: Number,
    regularMarketDayLow: Number,
    regularMarketVolume: Number,
    averageDailyVolume10Day: Number,
    averageDailyVolume3Month: Number,
    regularMarketPreviousClose: Number,
    regularMarketSource: String,
    regularMarketOpen: Number,
    exchange: String,
    exchangeName: String,
    exchangeDataDelayedBy: Number,
    marketState: String,
    quoteType: String,
    symbol: String,
    underlyingSymbol: String,
    shortName: String,
    longName: String,
    currency: String,
    quoteSourceName: String,
    currencySymbol: String,
    fromCurrency: String,
    toCurrency: String,
    lastMarket: String,
    marketCap: Number,
  },
  financialData: {
    maxAge: Number,
    currentPrice: Number,
    targetHighPrice: Number,
    targetLowPrice: Number,
    targetMeanPrice: Number,
    targetMedianPrice: Number,
    recommendationMean: Number,
    recommendationKey: String,
    numberOfAnalystOpinions: Number,
    totalCash: Number,
    totalCashPerShare: Number,
    ebitda: Number,
    totalDebt: Number,
    quickRatio: Number,
    currentRatio: Number,
    totalRevenue: Number,
    debtToEquity: Number,
    revenuePerShare: Number,
    returnOnAssets: Number,
    returnOnEquity: Number,
    freeCashflow: Number,
    operatingCashflow: Number,
    revenueGrowth: Number,
    grossMargins: Number,
    ebitdaMargins: Number,
    operatingMargins: Number,
    profitMargins: Number,
    financialCurrency: String,
  },
  lastModified: {
    type: Date,
    required: true,
  },
});

module.exports = mongoose.model("Stock", stockpileSchema, "stockpile");
